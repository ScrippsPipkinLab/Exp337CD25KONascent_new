########## DEseq2 for Nascent RNA-seq count table ##########
# Author: Huitian (Yolanda) Diao
# April 30th, 2019
# Dependencies:
# -| Compiled count table <- 2_0_collect_featureCounts.py
# --| Count files <- featureCount <- 2_0_featureCount.sh
# ---| Strand seperated bam file <- 1_3_splitStrands_bamTobdg_add-chr_bdgTobw_new.sh
# ---| Exon reference GFF3 file
# ----| Biomart: http://useast.ensembl.org/biomart/martview/a4b3d3135f51db16df0294bef537f063
# ----| BioMart-out-csv_To_Gff.sh  &  Gff_rmdup.py
######################################## Imports ########################################
library(DESeq2)
###--- Config
wk.dir <- "/Volumes/EXP337/Exp337CD25KONascent/2_count/3_DE-seq"
op.dir <- "/Volumes/EXP337/Exp337CD25KONascent/2_count/3_DE-seq"
setwd(wk.dir)
###--- Config
wk.dir <- "/Volumes/EXP337/Exp337CD25KONascent/3_DE-seq"
op.dir <- "/Volumes/EXP337/Exp337CD25KONascent/3_DE-seq"
setwd(wk.dir)
wk.dir <- "/Volumes/EXP337/Exp337CD25KONascent/3_DE-seq"
op.dir <- "/Volumes/EXP337/Exp337CD25KONascent/3_DE-seq"
count.file.f <- "/Volumes/Yolanda/Exp337CD25KONascent/2_count/dupr/2_compiled_csv/Exp337_dupr_F_count_c10.csv"
count.file.r <- "/Volumes/Yolanda/Exp337CD25KONascent/2_count/dupr/2_compiled_csv/Exp337_dupr_R_count_c10.csv"
setwd(wk.dir)
###--- Config
wk.dir <- "/Volumes/Yolanda/Exp337CD25KONascent/3_DE-seq"
op.dir <- "/Volumes/Yolanda/Exp337CD25KONascent/3_DE-seq"
count.file.f <- "/Volumes/Yolanda/Exp337CD25KONascent/2_count/dupr/2_compiled_csv/Exp337_dupr_F_count_c10.csv"
count.file.r <- "/Volumes/Yolanda/Exp337CD25KONascent/2_count/dupr/2_compiled_csv/Exp337_dupr_R_count_c10.csv"
setwd(wk.dir)
wk.dir <- "/Volumes/Yolanda/Exp337CD25KONascent/3_DE-seq"
op.dir <- "/Volumes/Yolanda/Exp337CD25KONascent/3_DE-seq"
count.file.f <- "/Volumes/Yolanda/Exp337CD25KONascent/2_count/dupr/2_compiled_csv/Exp337_dupr_F_count_c10.csv"
count.file.r <- "/Volumes/Yolanda/Exp337CD25KONascent/2_count/dupr/2_compiled_csv/Exp337_dupr_R_count_c10.csv"
sp.info.file <- "/Volumes/Yolanda/Exp337CD25KONascent/Info/sample_sheet.csv"
setwd(wk.dir)
######################################## Main ########################################
sp.tb <- read_csv(sp.info.file)
# ----| BioMart-out-csv_To_Gff.sh  &  Gff_rmdup.py
######################################## Imports ########################################
library(DESeq2)
library(dplyr)
library(tidyverse)
######################################## Functions ########################################
# Replace vector elements into new names
cvt_spNames <- function(vec_x, in_vec, out_vec){
vec_x_out <- c()
for (i in vec_x) {
if (i %in% in_vec){
i_idx <- match(i, in_vec)
vec_x_out <- c(vec_x_out,out_vec[i_idx])
} else {
vec_x_out <- c(vec_x_out, i)
}
}
return(vec_x_out)
}
# Name references
######################################## Config ########################################
wk.dir <- "/Volumes/Yolanda/Exp337CD25KONascent/3_DE-seq"
op.dir <- "/Volumes/Yolanda/Exp337CD25KONascent/3_DE-seq"
count.file.f <- "/Volumes/Yolanda/Exp337CD25KONascent/2_count/dupr/2_compiled_csv/Exp337_dupr_F_count_c10.csv"
count.file.r <- "/Volumes/Yolanda/Exp337CD25KONascent/2_count/dupr/2_compiled_csv/Exp337_dupr_R_count_c10.csv"
sp.info.file <- "/Volumes/Yolanda/Exp337CD25KONascent/Info/sample_sheet.csv"
setwd(wk.dir)
sp.tb <- read_csv(sp.info.file)
sp.tb
f.tb <- read_csv(count.file.f)
colnames(f.tb)
sp.tb <- read_csv(sp.info.file)
f.tb <- read_csv(count.file.f)
colnames(f.tb)
sp.tb
spNumber <- sp.tb$sp_order
in_ve <- spNumber
out_vec <- spName
out_vec <- paste(out_vec, "_", sep="")
in_ve <- spNumber
out_vec <- paste(out_vec, "_", sep="")
in_vec <- paste(in_vec, "_", sep="")
in_vec <- spNumber
in_vec <- paste(in_vec, "_", sep="")
in_vec
cvt_spNames <- function(vec_x, spNumber, spName, spCond){
vec_x_out <- c()
vec_cond_out <- c()
spNumber <- paste(spNumber, "_", sep="")
for (i in vec_x) {
new_i <- gsub("_dupr", "", i)
new_i <- gsub("_f", "", new_i)
new_i <- gsub("_r", "", new_i)
new_i <- paste(new_i, "_", sep="")
if (i %in% spNumber){
i_idx <- match(i, spNumber)
vec_x_out <- c(vec_x_out, spName[i_idx])
vec_cond_out <- c(vec_cond_out, spCond[i_idx])
} else {
print(paste(as.character(i), "not found!!"))
}
}
return(list(vec_x_out, vec_cond_out))
}
cvt_spNames(colnames(f.tb), sp.tb$sp_order, sp.tb$sp_name, sp.tb$sp_cond)
colnames(f.tb)
sp.tb$sp_order
vec_x <- colnames(f.tb)
spNumber <- sp.tb$sp_order
spName <- sp.tb$sp_name
spCond <- sp.tb$sp_cond
vec_x_out <- c()
vec_cond_out <- c()
spNumber <- paste(spNumber, "_", sep="")
for (i in vec_x) {
new_i <- gsub("_dupr", "", i)
new_i <- gsub("_f", "", new_i)
new_i <- gsub("_r", "", new_i)
new_i <- paste(new_i, "_", sep="")
if (i %in% spNumber){
i_idx <- match(i, spNumber)
vec_x_out <- c(vec_x_out, spName[i_idx])
vec_cond_out <- c(vec_cond_out, spCond[i_idx])
} else {
print(paste(as.character(i), "not found!!"))
}
}
i <- vec_x[1]
i
vec_x
vec_x <- colnames(f.tb)[2:length(colnames(f.tb))]
i <- vec_x[1]
i
vec_x <- colnames(f.tb)[2:length(colnames(f.tb))]
spNumber <- sp.tb$sp_order
spName <- sp.tb$sp_name
spCond <- sp.tb$sp_cond
vec_x_out <- c()
vec_cond_out <- c()
spNumber <- paste(spNumber, "_", sep="")
for (i in vec_x) {
i <- vec_x[1]
new_i <- gsub("_dupr", "", i)
new_i <- gsub("_f", "", new_i)
new_i <- gsub("_r", "", new_i)
new_i <- paste(new_i, "_", sep="")
if (new_i %in% spNumber){
i_idx <- match(i, spNumber)
vec_x_out <- c(vec_x_out, spName[i_idx])
vec_cond_out <- c(vec_cond_out, spCond[i_idx])
} else {
print(paste(as.character(i), "not found!!"))
}
}
vec_x_out
i <- vec_x[1]
new_i <- gsub("_dupr", "", i)
new_i <- gsub("_f", "", new_i)
new_i <- gsub("_r", "", new_i)
new_i <- paste(new_i, "_", sep="")
new_i
if (new_i %in% spNumber){
i_idx <- match(i, spNumber)
vec_x_out <- c(vec_x_out, spName[i_idx])
vec_cond_out <- c(vec_cond_out, spCond[i_idx])
}
i_idx
spNumber
new_i
for (i in vec_x) {
i <- vec_x[1]
new_i <- gsub("_dupr", "", i)
new_i <- gsub("_f", "", new_i)
new_i <- gsub("_r", "", new_i)
new_i <- paste(new_i, "_", sep="")
if (new_i %in% spNumber){
i_idx <- match(new_i, spNumber)
vec_x_out <- c(vec_x_out, spName[i_idx])
vec_cond_out <- c(vec_cond_out, spCond[i_idx])
} else {
print(paste(as.character(i), "not found!!"))
}
}
vec_x_out
vec_x <- colnames(f.tb)[2:length(colnames(f.tb))]
spNumber <- sp.tb$sp_order
spName <- sp.tb$sp_name
spCond <- sp.tb$sp_cond
vec_x_out <- c()
vec_cond_out <- c()
spNumber <- paste(spNumber, "_", sep="")
for (i in vec_x) {
new_i <- gsub("_dupr", "", i)
new_i <- gsub("_f", "", new_i)
new_i <- gsub("_r", "", new_i)
new_i <- paste(new_i, "_", sep="")
if (new_i %in% spNumber){
i_idx <- match(new_i, spNumber)
vec_x_out <- c(vec_x_out, spName[i_idx])
vec_cond_out <- c(vec_cond_out, spCond[i_idx])
} else {
print(paste(as.character(i), "not found!!"))
}
}
vec_cond_out
cvt_spNames <- function(vec_x, spNumber, spName, spCond){
vec_x_out <- c()
vec_cond_out <- c()
spNumber <- paste(spNumber, "_", sep="")
for (i in vec_x) {
new_i <- gsub("_dupr", "", i)
new_i <- gsub("_f", "", new_i)
new_i <- gsub("_r", "", new_i)
new_i <- paste(new_i, "_", sep="")
if (new_i %in% spNumber){
i_idx <- match(new_i, spNumber)
vec_x_out <- c(vec_x_out, spName[i_idx])
vec_cond_out <- c(vec_cond_out, spCond[i_idx])
} else {
print(paste(as.character(i), "not found!!"))
}
}
return(list(vec_x_out, vec_cond_out))
}
cvt_spNames(colnames(f.tb), sp.tb$sp_order, sp.tb$sp_name, sp.tb$sp_cond)
f.oldnames <- colnames(f.tb)[2:length(colnames(f.tb))]
f.new.names <- cvt_spNames(colnames(f.tb), sp.tb$sp_order, sp.tb$sp_name, sp.tb$sp_cond)
sp.tb <- read_csv(sp.info.file)
f.tb <- read_csv(count.file.f)
f.oldnames <- colnames(f.tb)[2:length(colnames(f.tb))]
f.new.names <- cvt_spNames(f.oldnames, sp.tb$sp_order, sp.tb$sp_name, sp.tb$sp_cond)
f.new.names
f.oldnames <- colnames(f.tb)[2:length(colnames(f.tb))]
f.names.conds <- cvt_spNames(f.oldnames, sp.tb$sp_order, sp.tb$sp_name, sp.tb$sp_cond)
f.names.conds[[1]]
f.tb
sp.tb <- read_csv(sp.info.file)
f.tb <- read_csv(count.file.f)
f.oldnames <- colnames(f.tb)[2:length(colnames(f.tb))]
f.names.conds <- cvt_spNames(f.oldnames, sp.tb$sp_order, sp.tb$sp_name, sp.tb$sp_cond)
colnames(f.tb) <- c("name", f.names.conds[[1]])
r.tb <- read_csv(count.file.r)
r.oldnames <- colnames(r.tb)[2:length(colnames(r.tb))]
r.names.conds <- cvt_spNames(r.oldnames, sp.tb$sp_order, sp.tb$sp_name, sp.tb$sp_cond)
colnames(r.tb) <- c("name", r.names.conds[[1]])
r.names.conds
r.names.conds == f.names.conds
f.names.conds[[1]] == r.names.conds[[1]]
##########---------- Setworking directory
wk.dir <- "/Volumes/Yolanda/Exp349_shBrg1_RNAseq/2_DEseq"
setwd(wk.dir)
##########---------- Read Quant Files
meta.file <- "/Volumes/Yolanda/Exp349_shBrg1_RNAseq/Info/meta.csv"
salmon.dir <- "/Volumes/Yolanda/Exp349_shBrg1_RNAseq/1_salmon_quant"
colData <- read.csv(meta.file)
files <- file.path(salmon.dir,colData$Samples,"quant.sf")
names(files) <- colData$Cond
#txdb <- makeTxDbFromGFF("/Users/yolandatiao/Documents/0_Bioinformatics2017/19_Salmon/Mus_musculus.GRCm38.90.gtf.gz")
#saveDb(txdb, file="Mus_musculus.GRCm38.90") #Did this once so I dont need to do it again
GRC38 <- "/Volumes/Yolanda/GSE88987_RNAseq/0_codes/Mus_musculus.GRCm38.90"
###--- Convert transcript ID to gene ID
txdb <- loadDb(GRC38)
k <- keys(txdb, "GENEID")
res <- AnnotationDbi::select(txdb, k, "TXNAME", "GENEID")
tx2gene <- res[,2:1]
# Must make table TX name Gene id to be read
tx2gene
library(readr)
library(GenomicFeatures)
library(DESeq2)
library(pcaExplorer)
library(org.Mm.eg.db)
library(rjson)
library(tximport)
library(DBI)
library(biomaRt)
library(dplyr)
library(tidyverse)
#saveDb(txdb, file="Mus_musculus.GRCm38.90") #Did this once so I dont need to do it again
GRC38 <- "/Volumes/Yolanda/GSE88987_RNAseq/0_codes/Mus_musculus.GRCm38.90"
###--- Convert transcript ID to gene ID
txdb <- loadDb(GRC38)
k <- keys(txdb, "GENEID")
res <- AnnotationDbi::select(txdb, k, "TXNAME", "GENEID")
tx2gene <- res[,2:1]
# Must make table TX name Gene id to be read
tx2gene
# Drop in freps TURE = ignore verison  # Ignore TX verison stringsplits on .
txi <- tximport(files, type="salmon", tx2gene=tx2gene, ignoreTxVersion = TRUE) #dropInfReps = TRUE,
# Construct sampleTable
sampleTable <- data.frame(condition =factor(c("shCd19", "shCd19", "shBrg1", "shBrg1", "shCcnt1", "shCcnt1")))
rownames(sampleTable) <- colnames(txi$counts)
sampleTable
#import into DESEQ2 framework
dds <- DESeqDataSetFromTximport(txi, sampleTable, ~ condition)
dds
f.tb
f.tb <- read_csv(count.file.f) %>% column_to_rownames(var = "name")
r.tb <- read_csv(count.file.r) %>% column_to_rownames(var = "name")
f.tb
f.oldnames <- colnames(f.tb)
f.names.conds <- cvt_spNames(f.oldnames, sp.tb$sp_order, sp.tb$sp_name, sp.tb$sp_cond)
colnames(f.tb) <- c(f.names.conds[[1]])
sp.tb <- read_csv(sp.info.file)
f.tb <- read_csv(count.file.f) %>% column_to_rownames(var = "name")
r.tb <- read_csv(count.file.r) %>% column_to_rownames(var = "name")
###----- Convert sample number to sample names
f.oldnames <- colnames(f.tb)
f.names.conds <- cvt_spNames(f.oldnames, sp.tb$sp_order, sp.tb$sp_name, sp.tb$sp_cond)
colnames(f.tb) <- f.names.conds[[1]]
r.oldnames <- colnames(r.tb)
r.names.conds <- cvt_spNames(r.oldnames, sp.tb$sp_order, sp.tb$sp_name, sp.tb$sp_cond)
colnames(r.tb) <- r.names.conds[[1]]
f.names.conds[[1]] == r.names.conds[[1]]
.names.conds[[1]]
f.names.conds[[1]]
as.factor(f.names.conds[[2]])
###----- Construct sample Table
DeseqDesign <- tibble(row.names=f.names.conds[[1]], condition=as.factor(f.names.conds[[2]]))
match <- (f.names.conds[[1]] == r.names.conds[[1]])
match
match <- (f.names.conds[[1]] == r.names.conds[[1]])
if (FALSE %in% match) {
print("Forward and reverse strand count summary files do not match (sample orders different)")
} else {
fr.tb <- bind_rows(f.tb, r.tb)
}
fr.tb
rownames(fr.tb) <- c(rownames(f.tb), rownames(r.tb))
fr.tb
######################################## Config ########################################
wk.dir <- "/Volumes/Yolanda/Exp337CD25KONascent/3_DE-seq"
op.dir <- "/Volumes/Yolanda/Exp337CD25KONascent/3_DE-seq"
count.file.f <- "/Volumes/Yolanda/Exp337CD25KONascent/2_count/dupr/2_compiled_csv/Exp337_dupr_F_count_c10.csv"
count.file.r <- "/Volumes/Yolanda/Exp337CD25KONascent/2_count/dupr/2_compiled_csv/Exp337_dupr_R_count_c10.csv"
sp.info.file <- "/Volumes/Yolanda/Exp337CD25KONascent/Info/sample_sheet.csv"
setwd(wk.dir)
######################################## Main ########################################
sp.tb <- read_csv(sp.info.file)
f.tb <- read_csv(count.file.f)
r.tb <- read_csv(count.file.r)
###----- Convert sample number to sample names
f.oldnames <- colnames(f.tb)[2:length(colnames(f.tb))]
f.names.conds <- cvt_spNames(f.oldnames, sp.tb$sp_order, sp.tb$sp_name, sp.tb$sp_cond)
colnames(f.tb) <- c("name", f.names.conds[[1]])
r.oldnames <- colnames(r.tb)[2:length(colnames(f.tb))]
r.names.conds <- cvt_spNames(r.oldnames, sp.tb$sp_order, sp.tb$sp_name, sp.tb$sp_cond)
colnames(r.tb) <- c("name", r.names.conds[[1]])
match <- (f.names.conds[[1]] == r.names.conds[[1]])
if (FALSE %in% match) {
fr.tb <- NULL
print("Forward and reverse strand count summary files do not match (sample orders different)")
} else {
fr.tb <- bind_rows(f.tb, r.tb) %>% column_to_rownames(var = "name")
}
fr.tb
###----- Construct DEseq objects
DeseqDesign <- tibble(row.names=f.names.conds[[1]], condition=as.factor(f.names.conds[[2]]))
DESmat <- DESeqDataSetFromMatrix(countData = fr.tb, colData = DeseqDesign, design = ~ condition)
DESmat <- DESeq(DESmat)
f.names.conds[[1]]
DeseqDesign <- tibble(row.names=f.names.conds[[1]], condition=as.factor(f.names.conds[[2]]))
DeseqDesign
DESmat <- DESeqDataSetFromMatrix(countData = fr.tb, colData = DeseqDesign, design = ~ condition)
DeseqDesign <- data.frame(names=f.names.conds[[1]], condition=as.factor(f.names.conds[[2]]))
DESmat <- DESeqDataSetFromMatrix(countData = fr.tb, colData = DeseqDesign, design = ~ condition)
DESmat <- DESeq(DESmat)
DESmat
str(DESmat)
DESmat <- DESeq(DESmat)
fr.tb
sp.tb <- read_csv(sp.info.file)
f.tb <- read_csv(count.file.f)
r.tb <- read_csv(count.file.r)
sp.tb <- read_csv(sp.info.file)
f.tb <- read_csv(count.file.f)
r.tb <- read_csv(count.file.r)
###----- Convert sample number to sample names
f.oldnames <- colnames(f.tb)[2:length(colnames(f.tb))]
f.names.conds <- cvt_spNames(f.oldnames, sp.tb$sp_order, sp.tb$sp_name, sp.tb$sp_cond)
colnames(f.tb) <- c("name", f.names.conds[[1]])
f.tb
###----- Convert sample number to sample names
f.oldnames <- colnames(f.tb)[2:length(colnames(f.tb))]
f.names.conds <- cvt_spNames(f.oldnames, sp.tb$sp_order, sp.tb$sp_name, sp.tb$sp_cond)
colnames(f.tb) <- c("name", f.names.conds[[1]])
f.tb$KO_6h_rep3 <- NULL
r.oldnames <- colnames(r.tb)[2:length(colnames(f.tb))]
r.names.conds <- cvt_spNames(r.oldnames, sp.tb$sp_order, sp.tb$sp_name, sp.tb$sp_cond)
colnames(r.tb) <- c("name", r.names.conds[[1]])
r.tb$KO_6h_rep3 <- NULL
match <- (f.names.conds[[1]] == r.names.conds[[1]])
if (FALSE %in% match) {
fr.tb <- NULL
print("Forward and reverse strand count summary files do not match (sample orders different)")
} else {
fr.tb <- bind_rows(f.tb, r.tb) %>% column_to_rownames(var = "name")
}
fr.tb
r.tb
match <- (f.names.conds[[1]] == r.names.conds[[1]])
match
match <- (f.names.conds[[1]] == r.names.conds[[1]])
match
f.names.conds[[1]] == r.names.conds[[1]]
r.names.conds[[1]]
f.names.conds[[1]] == r.names.conds[[1]]
f.names.conds[[1]]
f.oldnames <- colnames(f.tb)[2:length(colnames(f.tb))]
f.names.conds <- cvt_spNames(f.oldnames, sp.tb$sp_order, sp.tb$sp_name, sp.tb$sp_cond)
colnames(f.tb) <- c("name", f.names.conds[[1]])
f.tb$KO_6h_rep3 <- NULL
sp.tb <- read_csv(sp.info.file)
f.tb <- read_csv(count.file.f)
r.tb <- read_csv(count.file.r)
###----- Convert sample number to sample names
f.oldnames <- colnames(f.tb)[2:length(colnames(f.tb))]
f.names.conds <- cvt_spNames(f.oldnames, sp.tb$sp_order, sp.tb$sp_name, sp.tb$sp_cond)
colnames(f.tb) <- c("name", f.names.conds[[1]])
f.tb$KO_6h_rep3 <- NULL
r.oldnames <- colnames(r.tb)[2:length(colnames(f.tb))]
r.names.conds <- cvt_spNames(r.oldnames, sp.tb$sp_order, sp.tb$sp_name, sp.tb$sp_cond)
colnames(r.tb) <- c("name", r.names.conds[[1]])
r.tb$KO_6h_rep3 <- NULL
f.names.conds[[1]]
match <- (f.names.conds[[1]] == r.names.conds[[1]])
match
sp.tb <- read_csv(sp.info.file)
f.tb <- read_csv(count.file.f)
r.tb <- read_csv(count.file.r)
###----- Convert sample number to sample names
f.oldnames <- colnames(f.tb)[2:length(colnames(f.tb))]
f.names.conds <- cvt_spNames(f.oldnames, sp.tb$sp_order, sp.tb$sp_name, sp.tb$sp_cond)
colnames(f.tb) <- c("name", f.names.conds[[1]])
f.tb$KO_6h_rep3 <- NULL
r.oldnames <- colnames(r.tb)[2:length(colnames(f.tb))]
r.names.conds <- cvt_spNames(r.oldnames, sp.tb$sp_order, sp.tb$sp_name, sp.tb$sp_cond)
colnames(r.tb) <- c("name", r.names.conds[[1]])
r.tb$KO_6h_rep3 <- NULL
length(f.names.conds[[1]])
length(r.names.conds[[1]])
f.oldnames
r.oldnames
sp.tb <- read_csv(sp.info.file)
f.tb <- read_csv(count.file.f)
r.tb <- read_csv(count.file.r)
###----- Convert sample number to sample names
f.oldnames <- colnames(f.tb)[2:length(colnames(f.tb))]
f.oldnames
###----- Convert sample number to sample names
f.oldnames <- colnames(f.tb)[2:length(colnames(f.tb))]
f.names.conds <- cvt_spNames(f.oldnames, sp.tb$sp_order, sp.tb$sp_name, sp.tb$sp_cond)
colnames(f.tb) <- c("name", f.names.conds[[1]])
f.tb$KO_6h_rep3 <- NULL
r.oldnames <- colnames(r.tb)[2:length(colnames(r.tb))]
r.names.conds <- cvt_spNames(r.oldnames, sp.tb$sp_order, sp.tb$sp_name, sp.tb$sp_cond)
colnames(r.tb) <- c("name", r.names.conds[[1]])
r.tb$KO_6h_rep3 <- NULL
match <- (f.names.conds[[1]] == r.names.conds[[1]])
if (FALSE %in% match) {
fr.tb <- NULL
print("Forward and reverse strand count summary files do not match (sample orders different)")
} else {
fr.tb <- bind_rows(f.tb, r.tb) %>% column_to_rownames(var = "name")
}
fr.tb
DeseqDesign <- data.frame(names=f.names.conds[[1]], condition=as.factor(f.names.conds[[2]]))
DESmat <- DESeqDataSetFromMatrix(countData = fr.tb, colData = DeseqDesign, design = ~ condition)
DESmat <- DESeq(DESmat)
str(DESmat)
DeseqDesign <- data.frame(names=f.names.conds[[1]], condition=as.factor(f.names.conds[[2]]))
DESmat <- DESeqDataSetFromMatrix(countData = fr.tb, colData = DeseqDesign, design = ~ condition)
DESmat <- DESeq(DESmat)
fr.tb
